import org.apache.tools.ant.taskdefs.condition.Os

ext {
    // The drivers we want to use
    drivers = ["firefox", "chrome", "phantomJs", "edge", "ie"]

    ext {
        groovyVersion = '2.4.8'
        gebVersion = '1.1.1'
        seleniumVersion = '3.4.0'
        chromeDriverVersion = '2.29'
        geckoDriverVersion = '0.16.1'
        phantomJsVersion = '2.1.1'
    }
}

apply plugin: "groovy"
apply from: "gradle/idea.gradle"
apply from: "gradle/osSpecificDownloads.gradle"

repositories {
    mavenCentral()
}

dependencies {
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"

    // If using JUnit, need to depend on geb-junit (3 or 4)
    testCompile "org.gebish:geb-junit4:$gebVersion"

    // Drivers
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    // using a custom version of phantomjs driver for now as the original one does not support WebDriver > 2.43.1
    testCompile("com.codeborne:phantomjsdriver:1.4.3") {
        // phantomjs driver pulls in a different selenium version
        transitive = false
    }
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-edge-driver', version: '2.47.1'

    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-ie-driver', version: '3.4.0'

    testCompile (group: 'com.athaydes', name: 'spock-reports', version: '1.3.2'){
        transitive = false
    }
    testCompile 'org.slf4j:slf4j-api:1.7.13'
    testCompile 'org.slf4j:slf4j-simple:1.7.13'
    testCompile ("org.gebish:geb-spock:$gebVersion") {
        exclude group: "org.spockframework"
    }
    testCompile (group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4') {
        exclude group: "org.codehaus.groovy"
    }
}


drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

        // If you wanted to set the baseUrl in your buildâ€¦
        // systemProperty "geb.build.baseUrl", "http://myapp.com"
    }
}

edgeTest {
    def edgedriverFile = new File("MicrosoftWebDriver.exe")
    systemProperty "webdriver.edge.driver", edgedriverFile.absolutePath
}

firefoxTest {
    dependsOn unzipGeckoDriver
    def geckodriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "geckodriver.exe" : "geckodriver"
    def geckodriverFile = new File(unzipGeckoDriver.outputs.files.singleFile, geckodriverFilename)
    systemProperty "webdriver.gecko.driver", geckodriverFile.absolutePath
}

chromeTest {
    dependsOn unzipChromeDriver

    def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

ieTest {
    def ieDriverFile = new File("IEDriverServer.exe")
    systemProperty "webdriver.ie.driver", ieDriverFile.absolutePath
}


phantomJsTest {
    dependsOn unzipPhantomJs

    def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "bin/phantomjs"
    systemProperty "phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath
}

test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}

apply from: "gradle/ci.gradle"
